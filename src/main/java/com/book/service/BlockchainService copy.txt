package com.book.service;

import com.book.domain.Image;
import com.book.service.MetricService.ChartInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;


@Service
public class BlockchainService {
    
    private static final String PROJECT_BASE_PATH = System.getProperty("user.dir");
    private static final String IMAGE_BASE_PATH = PROJECT_BASE_PATH + "/src/main/webapp/static/blockchain-images/";
    
    private final MetricService metricService;
    private final ChartGenerationService chartGenerationService; // 新增
    
    @Autowired
    private SSHService sshService;
    @Autowired
    public BlockchainService(MetricService metricService, ChartGenerationService chartGenerationService) {
        this.metricService = metricService;
        this.chartGenerationService = chartGenerationService; // 新增
    }
    

    /**
     * 获取区块链图片
     * @param cryptocurrency 加密货币
     * @param metric 指标
     * @param analysisType 分析类型
     * @return 图片列表
     */

    private static final Map<String, String> DATA_FOLDER_MAP = new HashMap<>();
    static {
        DATA_FOLDER_MAP.put("bitcoin", "bitcoin");
        DATA_FOLDER_MAP.put("litecoin", "litecoin");
        DATA_FOLDER_MAP.put("dogecoin", "dogecoin");
        DATA_FOLDER_MAP.put("bitcash", "bcash");
        DATA_FOLDER_MAP.put("monacoin", "monacoin");
        DATA_FOLDER_MAP.put("feathercoin", "feathercoin");
    }

    private static final Map<String, String> SYMBOL_FOLDER_MAP = new HashMap<>();
    static {
        SYMBOL_FOLDER_MAP.put("bitcoin", "BTC");
        SYMBOL_FOLDER_MAP.put("litecoin", "LTC");
        SYMBOL_FOLDER_MAP.put("dogecoin", "DOGE");
        SYMBOL_FOLDER_MAP.put("bitcash", "BCH");
        SYMBOL_FOLDER_MAP.put("monacoin", "MON");
        SYMBOL_FOLDER_MAP.put("feathercoin", "FTC");
    }


    private static final Map<String, String> METRIC_FOLDER_MAP = new HashMap<>();
    static {
        METRIC_FOLDER_MAP.put("Block Size", "Block_Size");
        METRIC_FOLDER_MAP.put("Inflation Rate/Issuance Rate Analysis", "Inflation");
        METRIC_FOLDER_MAP.put("Micro Velocity", "Microvelocity");
        METRIC_FOLDER_MAP.put("Trade-offs Analysis", "Trade-offs");
        METRIC_FOLDER_MAP.put("Transaction Throughput", "Throughout");
        METRIC_FOLDER_MAP.put("Fund Flow", "Transaction_Fee");
    }


    public List<Image> getBlockchainImages(String cryptocurrency, String metric, String analysisType) {
        List<Image> images = new ArrayList<>();
        
        // 日志输出
        logDebugInfo(cryptocurrency, metric, analysisType);
        
        // 目录格式化：将analysisType映射为文件夹名称
        String folderAnalysisType = mapAnalysisTypeToFolder(analysisType);
        
        // // 1. 获取指标对应的图表信息
         List<ChartInfo> chartInfos = metricService.getChartInfo(metric, analysisType);
        
        // try {
        //     List<Image> generatedImages = chartGenerationService.generateCharts(
        //         cryptocurrency, metric, analysisType);
            
        //     if (!generatedImages.isEmpty()) {
        //         images.addAll(generatedImages);
        //         return images; // 如果成功生成，直接返回
        //     }
        // } catch (Exception e) {
        //     System.err.println("从远程服务器生成图表失败: " + e.getMessage());
        //     // 继续尝试其他方法获取图片
        // }
        
        // 第2步：尝试从直接文件路径获取图片
        for (ChartInfo chartInfo : chartInfos) {
            String chartPath = chartInfo.getPath();
            String chartFileName = new File(chartPath).getName();
            
            // 检查静态目录中是否存在此图片
            File staticImageFile = new File(PROJECT_BASE_PATH + "/src/main/webapp" + chartPath);
            if (staticImageFile.exists() && staticImageFile.isFile()) {
                images.add(new Image(chartInfo.getTitle(), chartPath));
                continue;
            }
            
            // 如果静态目录不存在，则尝试从加密货币特定目录获取
            String metricFolder = METRIC_FOLDER_MAP.getOrDefault(metric, metric.replace(" ", "_"));
            String dataFolder = DATA_FOLDER_MAP.getOrDefault(cryptocurrency, cryptocurrency + "_data");
            String symbolFolder = SYMBOL_FOLDER_MAP.getOrDefault(cryptocurrency, cryptocurrency.toUpperCase());

            File specificFolder = new File(PROJECT_BASE_PATH + "/src/main/webapp/static/blockchain-images/" +
                    cryptocurrency + "/" + metricFolder + "/" + folderAnalysisType);

            File specificImageFile = new File(specificFolder, chartFileName);

            if (specificImageFile.exists() && specificImageFile.isFile()) {
                String path = "/static/blockchain-images/" + cryptocurrency + "/" + metricFolder + "/" + folderAnalysisType + "/" + chartFileName;
                images.add(new Image(chartInfo.getTitle(), path));
            }
        }
        
        // 第3步：如果没有找到预定义的图表，则扫描目录查找所有图片
        if (images.isEmpty()) {
            images = scanDirectoryForImages(cryptocurrency, metric, folderAnalysisType);
        }
        
        System.out.println("最终返回的图片数量: " + images.size());
        return images;
    }
    /**
     * 扫描目录查找所有图片文件
     */
    private List<Image> scanDirectoryForImages(String cryptocurrency, String metric, String analysisType) {
        List<Image> images = new ArrayList<>();

        // 获取映射路径信息
        String metricFolder = METRIC_FOLDER_MAP.getOrDefault(metric, metric.replace(" ", "_"));
        String dataFolder = DATA_FOLDER_MAP.getOrDefault(cryptocurrency, cryptocurrency + "_data");
        String symbolFolder = SYMBOL_FOLDER_MAP.getOrDefault(cryptocurrency, cryptocurrency.toUpperCase());

        // 构建远程目录路径
        String remoteFolder = "/local/scratch/master_project_utxo_2025/data/" +
                cryptocurrency  + "/" + symbolFolder + "/" + metricFolder + "/";

        // 构建本地目录路径
        String localFolder = IMAGE_BASE_PATH + cryptocurrency + "/" + metricFolder + "/" + analysisType + "/";
        new File(localFolder).mkdirs();

        try {
            sshService.connect("abacus-2.ifi.uzh.ch", "zhongxingdu", "my99jsyDu@");

            // 1. 扫描远程 png 文件
            String command = "ls " + remoteFolder + "*.png";
            String result = sshService.executeCommand(command);
            System.out.println("远程目录扫描结果:\n" + result);

            String[] imagePaths = result.split("\n");

            for (String remoteImagePath : imagePaths) {
                String fileName = remoteImagePath.substring(remoteImagePath.lastIndexOf('/') + 1);
                String localFilePath = localFolder + fileName;

                // 2. 下载到本地
                sshService.downloadFile(remoteImagePath, localFilePath);

                // 3. 构建 Web 路径
                String webPath = "/static/blockchain-images/" +
                        cryptocurrency + "/" + metricFolder + "/" + analysisType + "/" + fileName;

                String title = getImageTitle(fileName, metric, analysisType);
                images.add(new Image(fileName, webPath, title));
            }

        } catch (Exception e) {
            System.err.println("远程扫描或下载图片失败: " + e.getMessage());
        } finally {
            try {
                sshService.disconnect();
            } catch (Exception e) {
                System.err.println("断开 SSH 连接失败: " + e.getMessage());
            }
        }

        return images;
    }
    
    /**
     * 将分析类型映射为文件夹名称
     */
    private String mapAnalysisTypeToFolder(String analysisType) {
        switch (analysisType) {
            case "static":
                return "static";
            case "temporal":
                return "temporal";
            case "comparison":
                return "comparison";
            default:
                return analysisType;
        }
    }
    
    /**
     * 从文件名生成图片标题
     */
    private String getImageTitle(String fileName, String metric, String analysisType) {
        // 移除文件扩展名
        String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));
        
        // 将下划线替换为空格并格式化
        String formattedName = nameWithoutExtension.replace('_', ' ');
        
        // 首字母大写
        formattedName = formattedName.substring(0, 1).toUpperCase() + formattedName.substring(1);
        
        return formattedName;
    }
    
    /**
     * 输出调试信息
     */
    private void logDebugInfo(String cryptocurrency, String metric, String analysisType) {
        System.out.println("------- 区块链图片获取调试信息 -------");
        System.out.println("项目根目录: " + PROJECT_BASE_PATH);
        System.out.println("图片基础路径: " + IMAGE_BASE_PATH);
        System.out.println("当前加密货币: " + cryptocurrency);
        System.out.println("当前指标: " + metric);
        System.out.println("分析类型: " + analysisType);
        System.out.println("文件夹分析类型: " + mapAnalysisTypeToFolder(analysisType));
    }
}